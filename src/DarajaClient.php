<?php

namespace EdLugz\Daraja;

use EdLugz\Daraja\Exceptions\DarajaRequestException;
use EdLugz\Daraja\Logging\Log;
use Exception;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\ServerException;
use Illuminate\Support\Facades\Cache;

/**
 *
 */
class DarajaClient
{
    /**
     * Guzzle client initialization.
     *
     * @var Client
     */
    protected Client $client;

    /**
     * Daraja APIs application client id.
     *
     * @var string
     */
    protected string $consumerKey;

    /**
     * Daraja APIs application client secret.
     *
     * @var string
     */
    protected string $consumerSecret;

    /**
     * Access token generated by Daraja APIs.
     *
     * @var string
     */
    protected string $accessToken;

    /**
     * Base URL end points for the Daraja APIs.
     *
     * @var array
     */
    protected array $base_url = [
        'uat'  => 'https://sandbox.safaricom.co.ke/',
        'live' => 'https://api.safaricom.co.ke',
    ];

    /**
     * Make the initializations required to make calls to the Daraja APIs
     * and throw the necessary exception if there are any missing-required
     * configurations.
     * @param string $consumerKey
     * @param string $consumerSecret
     * @param string $name
     * @throws DarajaRequestException
     */
    public function __construct(string $consumerKey, string $consumerSecret, string $name)
    {
        try {
            $this->validateConfigurations();

            $mode = $this->config('daraja.mode');

            $options = [
                'base_uri' => $this->base_url[$mode],
                'verify'   => $mode !== 'uat',
            ];

            if (config('daraja.logs.enabled')) {
                $options = Log::enable($options);
            }

            $this->client = new Client($options);
            $this->consumerKey = $consumerKey;
            $this->consumerSecret = $consumerSecret;
            $this->getAccessToken($name);
        } catch(Exception $e) {
            throw new DarajaRequestException('Daraja APIs: '.$e->getMessage(), $e->getCode());
        }
    }

    /**
     * Get access token from Daraja APIs.
     *
     * @throws DarajaRequestException
     *
     * @return void
     */
    protected function getAccessToken(string $name): void
    {
        //check if access token exists and not expired
        if (!Cache::get($name)) {
            // Set the auth option and fetch new token
            $options = [
                'auth' => [
                    $this->consumerKey,
                    $this->consumerSecret,
                ],
            ];

            $accessTokenDetails = $this->call('oauth/v1/generate?grant_type=client_credentials', $options, 'GET');

            //add to Cache
            Cache::add($name, $accessTokenDetails->access_token, now()->addMinutes(58));
        }

        $this->accessToken = Cache::get('darajaToken');
    }

    /**
     * Validate configurations.
     */
    protected function validateConfigurations(): void
    {
        // Validate credentials
        if (empty(config('daraja.consumer_key'))) {
            throw new \InvalidArgumentException('consumer key has not been set.');
        }

        if (empty(config('daraja.consumer_secret'))) {
            throw new \InvalidArgumentException('consumer secret has not been set');
        }
    }

    /**
     * Make API calls to Daraja API.
     *
     * @param string $url
     * @param array  $options
     * @param string $method
     *
     * @throws DarajaRequestException
     *
     * @return mixed
     */
    protected function call(string $url, array $options = [], string $method = 'POST'): mixed
    {
        if (isset($this->accessToken)) {
            $options['headers'] = ['Authorization' => 'Bearer '.$this->accessToken];
        }

        try {
            $response = $this->client->request($method, $url, $options);

            $stream = $response->getBody();
            $stream->rewind();
            $content = $stream->getContents();

            return json_decode($content);
        } catch (ServerException $e) {
            $response = json_decode($e->getResponse()->getBody()->getContents());
            if (isset($response->Envelope)) {
                $message = 'Daraja APIs: '.$response->Envelope->Body->Fault->faultstring;

                throw new DarajaRequestException($message, $e->getCode());
            }

            throw new DarajaRequestException('Daraja APIs: '.$response->errorMessage, $e->getCode());
        } catch (ClientException $e) {
            $response = json_decode($e->getResponse()->getBody()->getContents());

            throw new DarajaRequestException('Daraja APIs: '.$response->errorMessage, $e->getCode());
        } catch (GuzzleException $e) {
            throw new DarajaRequestException('Daraja APIs: '.$e->getMessage(), $e->getCode());
        }
    }

}
